{"https://www.jenkins.io/doc/": {"title": "\nJenkins User Documentation\n", "content": "\n\n\n\nJenkins User Documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> User Documentation Home\n\n\nUser Handbook\n\n\n\nUser Handbook Overview\n\n\nInstalling Jenkins\n\n\nPlatform Information\n\n\nUsing Jenkins\n\n\nPipeline\n\n\nBlue Ocean\n\n\nManaging Jenkins\n\n\nSecuring Jenkins\n\n\nSystem Administration\n\n\nScaling Jenkins\n\n\nTroubleshooting Jenkins\n\n\nGlossary\n\n\n\nTutorials\n\n\n\nGuided Tour\n\n\nJenkins Pipeline\n\n\nUsing Build Tools\n\n\n\nResources\n\n\n\nPipeline Syntax reference\n\n\nPipeline Steps reference\n\n\nLTS Upgrade guides\n\n\n\n\n\n\nJenkins User Documentation\n\n\nWelcome to the Jenkins user documentation - for people wanting to use\nJenkins\u2019s existing functionality and plugin features.\n\n\nIf you want to extend the functionality of Jenkins by developing your own\nJenkins plugins, please refer to the Extend Jenkins\n(developer documentation).\n\n\nWhat is Jenkins?\n\n\nJenkins is a self-contained, open source automation server which can be used to\nautomate all sorts of tasks related to building, testing, and delivering or\ndeploying software.\n\n\nJenkins can be installed through native system packages, Docker, or even run\nstandalone by any machine with a Java Runtime Environment (JRE) installed.\n\n\n\n\nAbout this documentation\n\n\nThis documentation begins with a\nGuided Tour\nto help you get up and running with Jenkins and introduce you to Jenkins\u2019s main\nfeature, Pipeline.\n\n\nThere are also tutorials geared to developers who want to\norchestrate and automate building their project in Jenkins using Pipeline and\nBlue Ocean.\n\n\nIf you\u2019ve never used Jenkins before or have limited Jenkins experience, then the\nGuided Tour and introductory tutorials are good places to start.\n\n\nIf you are looking for more detailed information about using Jenkins, please\nrefer to the User Handbook.\n\n\nDocumentation scope\n\nJenkins is a highly extensible product whose functionality can be extended\nthrough the installation of plugins.\n\n\nThere are a vast array of plugins available to Jenkins. However, the\ndocumentation covered in the Guided Tour,\nTutorials, Solution pages and User Handbook of\nthis documentation are based on a Jenkins installation\nwith the Blue Ocean plugins installed,\nas well as the \"suggested plugins\", which are specified when running through the\nPost-installation setup wizard.\n\n\n\n\n\n\n\nWas this page helpful?\n\nPlease submit your feedback about this page through this\nquick form.\nAlternatively, if you don't wish to complete the quick form, you can simply\nindicate if you found this page helpful?\n\n\n\n\n\n\n\n\n\nYes\u00a0\u00a0\u00a0\u00a0\n\nNo\n\n\n\n\nSubmit\n\nSee existing feedback here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "url": "https://www.jenkins.io/doc/"}, "https://www.jenkins.io/doc/book/installing/": {"title": "\nInstalling Jenkins\n", "content": "\n\n\n\nInstalling Jenkins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> User Documentation Home\n\n\nUser Handbook\n\n\n\nUser Handbook Overview\n\n\nInstalling Jenkins\n\n\n\nDocker\n\n\nKubernetes\n\n\nLinux\n\n\nmacOS\n\n\nWindows\n\n\nOther Systems\n\n\nWAR file\n\n\nOther Servlet Containers\n\n\nOffline Installations\n\n\nInitial Settings\n\n\n\n\n\nPlatform Information\n\n\nUsing Jenkins\n\n\nPipeline\n\n\nBlue Ocean\n\n\nManaging Jenkins\n\n\nSecuring Jenkins\n\n\nSystem Administration\n\n\nScaling Jenkins\n\n\nTroubleshooting Jenkins\n\n\nGlossary\n\n\n\nTutorials\n\n\n\nGuided Tour\n\n\nJenkins Pipeline\n\n\nUsing Build Tools\n\n\n\nResources\n\n\n\nPipeline Syntax reference\n\n\nPipeline Steps reference\n\n\nLTS Upgrade guides\n\n\n\n\n\n\n\n\n\n\u00e2\u0087\u0090 User Handbook Overview\n\n\n\n\nIndex\n\n\n\n\nDocker \u00e2\u0087\u0092\n\n\n\n\n\n\n\n\n\nInstalling Jenkins\n\n\n\n\nChapter Sub-Sections\n\n\n\n\nDocker\n\n\n\n\nKubernetes\n\n\n\n\nLinux\n\n\n\n\nmacOS\n\n\n\n\nWindows\n\n\n\n\nOther Systems\n\n\n\n\nWAR file\n\n\n\n\nOther Servlet Containers\n\n\n\n\nOffline Installations\n\n\n\n\nInitial Settings\n\n\n\n\n\n\n\n\n\n\n\nThe procedures in this chapter are for new installations of Jenkins.\n\n\nJenkins is typically run as a standalone application in its own process.\nThe Jenkins WAR file bundles Winstone,\na Jetty servlet container wrapper,\nand can be started on any operating system or platform with a version of Java supported by Jenkins.\n\n\nTheoretically, Jenkins can also be run as a servlet in a traditional servlet container\nlike Apache Tomcat or WildFly,\nbut in practice this is largely untested and there are many caveats.\nIn particular, support for WebSocket agents is only implemented for the Jetty servlet container.\nSee the Servlet Container Support Policy page for details.\n\n\n\n\n\n\n\n\n\n\n\u00e2\u0087\u0090 User Handbook Overview\n\n\n\n\nIndex\n\n\n\n\nDocker \u00e2\u0087\u0092\n\n\n\n\n\n\n\n\n\n\n\nWas this page helpful?\n\nPlease submit your feedback about this page through this\nquick form.\nAlternatively, if you don't wish to complete the quick form, you can simply\nindicate if you found this page helpful?\n\n\n\n\n\n\n\n\n\nYes\u00a0\u00a0\u00a0\u00a0\n\nNo\n\n\n\n\nSubmit\n\nSee existing feedback here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "url": "https://www.jenkins.io/doc/book/installing/"}, "https://www.jenkins.io/doc/book/pipeline/": {"title": "\nPipeline\n", "content": "\n\n\n\nPipeline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> User Documentation Home\n\n\nUser Handbook\n\n\n\nUser Handbook Overview\n\n\nInstalling Jenkins\n\n\nPlatform Information\n\n\nUsing Jenkins\n\n\nPipeline\n\n\n\nGetting started with Pipeline\n\n\nUsing a Jenkinsfile\n\n\nRunning Pipelines\n\n\nBranches and Pull Requests\n\n\nUsing Docker with Pipeline\n\n\nExtending with Shared Libraries\n\n\nPipeline Development Tools\n\n\nPipeline Syntax\n\n\nPipeline as Code\n\n\nPipeline Best Practices\n\n\nScaling Pipelines\n\n\nPipeline CPS Method Mismatches\n\n\n\n\n\nBlue Ocean\n\n\nManaging Jenkins\n\n\nSecuring Jenkins\n\n\nSystem Administration\n\n\nScaling Jenkins\n\n\nTroubleshooting Jenkins\n\n\nGlossary\n\n\n\nTutorials\n\n\n\nGuided Tour\n\n\nJenkins Pipeline\n\n\nUsing Build Tools\n\n\n\nResources\n\n\n\nPipeline Syntax reference\n\n\nPipeline Steps reference\n\n\nLTS Upgrade guides\n\n\n\n\n\n\n\n\n\n\u00e2\u0087\u0090 Using Jenkins\n\n\n\n\nIndex\n\n\n\n\nGetting started with Pipeline \u00e2\u0087\u0092\n\n\n\n\n\n\n\n\n\nPipeline\n\n\n\n\nChapter Sub-Sections\n\n\n\n\nGetting started with Pipeline\n\n\n\n\nUsing a Jenkinsfile\n\n\n\n\nRunning Pipelines\n\n\n\n\nBranches and Pull Requests\n\n\n\n\nUsing Docker with Pipeline\n\n\n\n\nExtending with Shared Libraries\n\n\n\n\nPipeline Development Tools\n\n\n\n\nPipeline Syntax\n\n\n\n\nPipeline as Code\n\n\n\n\nPipeline Best Practices\n\n\n\n\nScaling Pipelines\n\n\n\n\nPipeline CPS Method Mismatches\n\n\n\n\n\n\nTable of Contents\n\nWhat is Jenkins Pipeline?\n\nDeclarative versus Scripted Pipeline syntax\n\n\nWhy Pipeline?\nPipeline concepts\n\nPipeline\nNode\nStage\nStep\n\n\nPipeline syntax overview\n\nDeclarative Pipeline fundamentals\nScripted Pipeline fundamentals\n\n\nPipeline example\n\n\n\n\n\nThis chapter covers all recommended aspects of Jenkins Pipeline functionality,\nincluding how to:\n\n\n\n\nget started with Pipeline \u00e2\u0080\u0094 covers how to\ndefine a Jenkins Pipeline (i.e. your\nPipeline) through\nBlue Ocean, through the\nclassic UI or in\nSCM,\n\n\ncreate and use a Jenkinsfile \u00e2\u0080\u0094 covers use-case scenarios\non how to craft and construct your Jenkinsfile,\n\n\nwork with branches and pull requests,\n\n\nuse Docker with Pipeline \u00e2\u0080\u0094 covers how Jenkins can invoke Docker\ncontainers on agents/nodes (from a Jenkinsfile) to build your Pipeline\nprojects,\n\n\nextend Pipeline with shared libraries,\n\n\nuse different development tools to facilitate the creation\nof your Pipeline, and\n\n\nwork with Pipeline syntax \u00e2\u0080\u0094 this page is a comprehensive\nreference of all Declarative Pipeline syntax.\n\n\n\n\nFor an overview of content in the Jenkins User Handbook, see\nUser Handbook Overview.\n\n\n\n\nWhat is Jenkins Pipeline?\n\n\nJenkins Pipeline (or simply \"Pipeline\" with a capital \"P\") is a suite of plugins\nwhich supports implementing and integrating continuous delivery pipelines into\nJenkins.\n\n\nA continuous delivery (CD) pipeline is an automated expression of your process\nfor getting software from version control right through to your users and\ncustomers. Every change to your software (committed in source control) goes\nthrough a complex process on its way to being released. This process involves\nbuilding the software in a reliable and repeatable manner, as well as\nprogressing the built software (called a \"build\") through multiple stages of\ntesting and deployment.\n\n\nPipeline provides an extensible set of tools for modeling simple-to-complex\ndelivery pipelines \"as code\" via the\nPipeline domain-specific language (DSL) syntax.\n[1]\n\n\nThe definition of a Jenkins Pipeline is written into a text file (called a\nJenkinsfile) which in turn can be committed to a project\u2019s\nsource control repository.\n[2]\nThis is the foundation of \"Pipeline-as-code\"; treating the CD pipeline as a part of\nthe application to be versioned and reviewed like any other code.\n\n\nCreating a Jenkinsfile and committing it to source control provides a number\nof immediate benefits:\n\n\n\n\nAutomatically creates a Pipeline build process for all branches and pull\nrequests.\n\n\nCode review/iteration on the Pipeline (along with the remaining source code).\n\n\nAudit trail for the Pipeline.\n\n\nSingle source of truth\n[3]\nfor the Pipeline, which can be viewed and edited by multiple\nmembers of the project.\n\n\n\n\nWhile the syntax for defining a Pipeline, either in the web UI or with a\nJenkinsfile is the same, it is generally considered best practice to define\nthe Pipeline in a Jenkinsfile and check that in to source control.\n\n\nDeclarative versus Scripted Pipeline syntax\n\nA Jenkinsfile can be written using two types of syntax \u00e2\u0080\u0094 Declarative and\nScripted.\n\n\nDeclarative and Scripted Pipelines are constructed fundamentally differently.\nDeclarative Pipeline is a more recent feature of Jenkins Pipeline which:\n\n\n\n\nprovides richer syntactical features over Scripted Pipeline syntax, and\n\n\nis designed to make writing and reading Pipeline code easier.\n\n\n\n\nMany of the individual syntactical components (or \"steps\") written into a\nJenkinsfile, however, are common to both Declarative and Scripted Pipeline.\nRead more about how these two types of syntax differ in Pipeline concepts\nand Pipeline syntax overview below.\n\n\n\n\n\nWhy Pipeline?\n\n\nJenkins is, fundamentally, an automation engine which supports a number of\nautomation patterns. Pipeline adds a powerful set of automation tools onto\nJenkins, supporting use cases that span from simple continuous integration to\ncomprehensive CD pipelines. By modeling a series of related tasks, users can\ntake advantage of the many features of Pipeline:\n\n\n\n\nCode: Pipelines are implemented in code and typically checked into source\ncontrol, giving teams the ability to edit, review, and iterate upon their\ndelivery pipeline.\n\n\nDurable: Pipelines can survive both planned and unplanned restarts of the\nJenkins controller.\n\n\nPausable: Pipelines can optionally stop and wait for human input or approval\nbefore continuing the Pipeline run.\n\n\nVersatile: Pipelines support complex real-world CD requirements, including\nthe ability to fork/join, loop, and perform work in parallel.\n\n\nExtensible: The Pipeline plugin supports custom extensions to its DSL\n[1] and multiple options for integration with other plugins.\n\n\n\n\nWhile Jenkins has always allowed rudimentary forms of chaining Freestyle Jobs\ntogether to perform sequential tasks,\n[4] Pipeline makes this concept a first-class citizen in\nJenkins.\n\n\nWhat is the difference between Freestyle and Pipeline in Jenkins\n\n\n\n\n\nBuilding on the core Jenkins value of extensibility, Pipeline is also extensible\nboth by users with Pipeline Shared Libraries and by\nplugin developers.\n[5]\n\n\nThe flowchart below is an example of one CD scenario easily modeled in Jenkins\nPipeline:\n\n\n\n\n\n\n\nPipeline concepts\n\n\nThe following concepts are key aspects of Jenkins Pipeline, which tie in closely\nto Pipeline syntax (see the overview below).\n\n\nPipeline\n\nA Pipeline is a user-defined model of a CD pipeline. A Pipeline\u2019s code defines\nyour entire build process, which typically includes stages for building an\napplication, testing it and then delivering it.\n\n\nAlso, a pipeline block is a\nkey part of Declarative Pipeline syntax.\n\n\n\nNode\n\nA node is a machine which is part of the Jenkins environment and is capable of\nexecuting a Pipeline.\n\n\nAlso, a node block is a\nkey part of Scripted Pipeline syntax.\n\n\n\nStage\n\nA stage block defines a conceptually distinct subset of tasks performed\nthrough the entire Pipeline (e.g. \"Build\", \"Test\" and \"Deploy\" stages),\nwhich is used by many plugins to visualize or present Jenkins Pipeline\nstatus/progress.\n[6]\n\n\n\nStep\n\nA single task. Fundamentally, a step tells Jenkins what to do at a\nparticular point in time (or \"step\" in the process). For example, to execute\nthe shell command make, use the sh step: sh 'make'. When a plugin\nextends the Pipeline DSL, [1] that typically means the plugin has\nimplemented a new step.\n\n\n\n\n\nPipeline syntax overview\n\n\nThe following Pipeline code skeletons illustrate the fundamental differences\nbetween Declarative Pipeline syntax and\nScripted Pipeline syntax.\n\n\nBe aware that both stages and steps (above) are common\nelements of both Declarative and Scripted Pipeline syntax.\n\n\nDeclarative Pipeline fundamentals\n\nIn Declarative Pipeline syntax, the pipeline block defines all the work done\nthroughout your entire Pipeline.\n\n \nJenkinsfile (Declarative Pipeline)\n\npipeline {\n    agent any (1)\n    stages {\n        stage('Build') { (2)\n            steps {\n                // (3)\n            }\n        }\n        stage('Test') { (4)\n            steps {\n                // (5)\n            }\n        }\n        stage('Deploy') { (6)\n            steps {\n                // (7)\n            }\n        }\n    }\n}\n\n\n\n\n1\nExecute this Pipeline or any of its stages, on any available agent.\n\n\n2\nDefines the \"Build\" stage.\n\n\n3\nPerform some steps related to the \"Build\" stage.\n\n\n4\nDefines the \"Test\" stage.\n\n\n5\nPerform some steps related to the \"Test\" stage.\n\n\n6\nDefines the \"Deploy\" stage.\n\n\n7\nPerform some steps related to the \"Deploy\" stage.\n\n\n\n\n\nScripted Pipeline fundamentals\n\nIn Scripted Pipeline syntax, one or more node blocks do the core work\nthroughout the entire Pipeline. Although this is not a mandatory requirement of\nScripted Pipeline syntax, confining your Pipeline\u2019s work inside of a node\nblock does two things:\n\n\n\n\nSchedules the steps contained within the block to run by adding an item\nto the Jenkins queue. As soon as an executor is free on a node, the\nsteps will run.\n\n\nCreates a workspace (a directory specific to that particular\nPipeline) where work can be done on files checked out from source control.\nCaution: Depending on your Jenkins configuration, some workspaces may\nnot get automatically cleaned up after a period of inactivity. See tickets\nand discussion linked from\nJENKINS-2111 for more\ninformation.\n\n\n\n \nJenkinsfile (Scripted Pipeline)\n\nnode {  (1)\n    stage('Build') { (2)\n        // (3)\n    }\n    stage('Test') { (4)\n        // (5)\n    }\n    stage('Deploy') { (6)\n        // (7)\n    }\n}\n\n\n\n\n1\nExecute this Pipeline or any of its stages, on any available agent.\n\n\n2\nDefines the \"Build\" stage. stage blocks are optional in Scripted Pipeline\nsyntax. However, implementing stage blocks in a Scripted Pipeline provides\nclearer visualization of each stage's subset of tasks/steps in the Jenkins UI.\n\n\n3\nPerform some steps related to the \"Build\" stage.\n\n\n4\nDefines the \"Test\" stage.\n\n\n5\nPerform some steps related to the \"Test\" stage.\n\n\n6\nDefines the \"Deploy\" stage.\n\n\n7\nPerform some steps related to the \"Deploy\" stage.\n\n\n\n\n\n\n\nPipeline example\n\n\nHere is an example of a Jenkinsfile using Declarative Pipeline syntax \u00e2\u0080\u0094 its\nScripted syntax equivalent can be accessed by clicking the Toggle Scripted\nPipeline link below:\n\n \nJenkinsfile (Declarative Pipeline)\n\npipeline { (1)\n    agent any (2)\n    options {\n        skipStagesAfterUnstable()\n    }\n    stages {\n        stage('Build') { (3)\n            steps { (4)\n                sh 'make' (5)\n            }\n        }\n        stage('Test'){\n            steps {\n                sh 'make check'\n                junit 'reports/**/*.xml' (6)\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'make publish' //\n            }\n        }\n    }\n}\n \nToggle Scripted Pipeline\n(Advanced)\n\n\nJenkinsfile (Scripted Pipeline)\n\nnode { //\n    stage('Build') { (3)\n        sh 'make' (5)\n    }\n    stage('Test') {\n        sh 'make check'\n        junit 'reports/**/*.xml' (6)\n    }\n    if (currentBuild.currentResult == 'SUCCESS') {\n        stage('Deploy') {\n            sh 'make publish' //\n        }\n    }\n}\n\n\n\n\n1\npipeline is Declarative\nPipeline-specific syntax that defines a \"block\" containing all content and\ninstructions for executing the entire Pipeline.\n\n\n2\nagent is Declarative Pipeline-specific syntax that\ninstructs Jenkins to allocate an executor (on a node) and workspace for the\nentire Pipeline.\n\n\n3\nstage is a syntax block that describes a\nstage of this Pipeline. Read more about stage blocks in\nDeclarative Pipeline syntax on the Pipeline syntax page. As\nmentioned above, stage blocks are\noptional in Scripted Pipeline syntax.\n\n\n4\nsteps is Declarative Pipeline-specific syntax that\ndescribes the steps to be run in this stage.\n\n\n5\nsh is a Pipeline step (provided by the\nPipeline: Nodes and Processes plugin) that\nexecutes the given shell command.\n\n\n6\njunit is another Pipeline step (provided by the\nJUnit plugin) for aggregating test reports.\n\n\n\n\nRead more about Pipeline syntax on the Pipeline Syntax page.\n\n\n\n\n\n\n1. Domain-specific language\n\n\n2. Source control management\n\n\n3. Single source of truth\n\n\n4. Additional plugins have been used to implement complex behaviors utilizing Freestyle Jobs such as the Copy Artifact, Parameterized Trigger, and Promoted Builds plugins\n\n\n5. GitHub Branch Source plugin\n\n\n6. Blue Ocean, Pipeline: Stage View plugin\n\n\n\n\n\n\n\n\n\n\n\n\u00e2\u0087\u0090 Using Jenkins\n\n\n\n\nIndex\n\n\n\n\nGetting started with Pipeline \u00e2\u0087\u0092\n\n\n\n\n\n\n\n\n\n\n\nWas this page helpful?\n\nPlease submit your feedback about this page through this\nquick form.\nAlternatively, if you don't wish to complete the quick form, you can simply\nindicate if you found this page helpful?\n\n\n\n\n\n\n\n\n\nYes\u00a0\u00a0\u00a0\u00a0\n\nNo\n\n\n\n\nSubmit\n\nSee existing feedback here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "url": "https://www.jenkins.io/doc/book/pipeline/"}}